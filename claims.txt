/*****************************************************************************
TITLE: Assembler, Emulator
AUTHOR:   Munesh Meena
ROLLNO:   2101CS47
Declaration of Authorship
This txt file, claims.txt, is part of the assignment of CS322 at the
department of Computer Science and Enginering, IIT Patna .
*****************************************************************************/
=============================
Files:
=============================
1.  All the files I submitted `asm.cpp`, `emu.cpp` and `claims.txt`, have my NAME and ROLL NO at the start, along with a Declaration of Authorship.

2.  The evidence for ASSEMBLER including the output files from the `6` test examples has also been uploaded. They are:
        1) test01.asm                (3 output files)
        2) test02.asm                (1 output files)
        3) test03.asm                (3 output files)
        4) test04.asm                (3 output files)
        5) test05.asm                (1 output files)
       
    All the test files have been tested and work properly.

3.  As for the evidence for EMULATOR, `5` files namely `test1.txt`, `sum_of_n_natural_number.asm`, `triangle.asm`, `bubble_sort.asm` and `binary_search.asm` are also submitted.

4.  Both of my cpp programs did not show any errors and warnings when Compiled it with:
    C++: `g++`
   
5.  Both the source files `asm.cpp` and `emu.cpp` are in the `/home/munesh/Desktop/coding_minutes/Munesh_cs209` directory.

6.  A `Makefile` has also been uploaded along with the other files.

7. `Makefile` defaults to save the `asm` and `emu` executables in the `bin/` directory.



=============================
Program format and structure:
=============================
1. ASSEMBLER:
    * With two data structures to store labels and mnemonic table with expected operands respectively.
    * Uses a double routine for both passes.
    * Detects label errors.
    * Consistent and sensible formatting with sensible program structure.
    * Sensible variable, function & type names with explanatory comments.
    * By giving the instruction like "g++ asm.cpp -o asm " and "./asm test1.asm", the program shows the state of registers as the program executes.
    * Advanced listing file.
    * Assembles test programs.
   

2. EMULATOR:
    * With three data structures to store memory, mnemonic table with expected operands and Register file structure respectively.
    * Loads object file.
    * By giving the instruction like "g++ emu.cpp -o emu " and "./emu -trace test1.o", the program shows the state of registers as the program executes.
    * Detects errant programs.


=============================
Testing:
=============================
1. ASSEMBLER:
    I have tested 6 examples shown as below. The errors only occurred in the file `error_handling.asm` and the program immediately stopped on the second pass.
    The others were tested without any errors detected and produced three output files `listing file`, `log file` and `machine readable object file` for each example.
    All of the above mentioned files have been attached along.

    1)
        # ASM-execution: /home/munesh/Desktop/coding_minutes/Munesh_cs209/asm.cpp
        # OUTPUT:
        #test01.log file--------------->
          Below are the label names and values :
            label => 0
            loop => 3
            next => 5
            var1 => 7

            Below are the label names and values which have been used:
            loop
            next
            var1

            Warnings: 
            Line 0 : Unused Label

            Errors: 


        # test01.lst file--------->:
          00000000 00000000 label: ldc 0 
          00000001 FFFFFB00 ldc -5 
          00000002 00000500 ldc +5 
          00000003 FFFFFF11 loop: br loop 
          00000004 00000011 br next 
          00000005 00000300 next: ldc loop 
          00000006 00000700 ldc var1 
          00000007 00000000 var1: data 0 
 


        #test1.o file--------------->
        Empty

    2)# ASM-execution: /home/munesh/Desktop/coding_minutes/Munesh_cs209/asm.cpp
        # OUTPUT:
        #test02.log file--------------->
          Below are the label names and values :
        label => 0

        Below are the label names and values which have been used:

        Warnings: 
        Line 0 : Unused Label

        Errors: 
        Line 0 : No such Label
        Line 4 : Error!Duplicate labels aren't allowed .
        Line 7 : Error! There must be an operand.
        Line 8 : Error! No operands are allowed for this operand.
        Line 9 : Error! This operand allows one operation only
        Line 10 : Error! Invalid label name  [alphanumeric, starting value can only be letters] .
        Line 11 : There isn't  any such instruction 
        Line 12 : There isn't  any such instruction 

        #test02.lst file--------------->
            00000000 FFFFFF11 label: label: br nonesuch 
            00000001 0003ED00 ldc 08ge 
            00000002 00000000 ldc 
            00000003 00000006 add 5 
            00000004 00000000 ldc 5, 6 
            00000005 000000B0 0def: fibble 
            00000006 00000000 0def 

        #test02.o file--------------->
        Empty
      

        3)# ASM-execution: /home/munesh/Desktop/coding_minutes/Munesh_cs209/asm.cpp
        # OUTPUT:
        #test03.log file--------------->
        
        Below are the label names and values :
        val => 75
        val2 => 66

        Below are the label names and values which have been used:
        val
        val2

        Warnings: 

        Errors: 
          
        #test03.lst file--------------->
        00000000 0000004B val: SET 75 
        00000001 00004B00 ldc val 
        00000002 00004201 adc val2 
        00000003 00000042 val2: SET 66 
        
        #test03.o file--------------->
        Empty

        4)# ASM-execution: /home/munesh/Desktop/coding_minutes/Munesh_cs209/asm.cpp
        # OUTPUT:
        #test04.log file--------------->

            Below are the label names and values :
            count => 74
            loop => 15
            main => 10
            one => 70
            result => 75
            skip => 48
            triangle => 36

            Below are the label names and values which have been used:
            count
            loop
            main
            one
            result
            skip
            triangle

            Warnings: 

            Errors: 


         #test04.lst file--------------->
            00000000 00100000 ldc 0x1000 
            00000001 0000000B a2sp 
            00000002 FFFFFF0A adj -1 
            00000003 00004B00 ldc result 
            00000004 00000003 stl 0 
            00000005 00004A00 ldc count 
            00000006 00000004 ldnl 0 
            00000007 0000020D call main 
            00000008 0000010A adj 1 
            00000009 00000012 HALT 
            0000000A FFFFFD0A main: adj -3 
            0000000B 00000103 stl 1 
            0000000C 00000203 stl 2 
            0000000D 00000000 ldc 0 
            0000000E 00000003 stl 0 
            0000000F FFFFFF0A loop: adj -1 
            00000010 00000302 ldl 3 
            00000011 00000003 stl 0 
            00000012 00000102 ldl 1 
            00000013 0000100D call triangle 
            00000014 0000010A adj 1 
            00000015 00000302 ldl 3 
            00000016 00000005 stnl 0 
            00000017 00000302 ldl 3 
            00000018 00000101 adc 1 
            00000019 00000303 stl 3 
            0000001A 00000002 ldl 0 
            0000001B 00000101 adc 1 
            0000001C 00000003 stl 0 
            0000001D 00000002 ldl 0 
            0000001E 00000202 ldl 2 
            0000001F 00000007 sub 
            00000020 FFFFEE10 brlz loop 
            00000021 00000102 ldl 1 
            00000022 0000030A adj 3 
            00000023 00000004 return 
            00000024 FFFFFD0A triangle: adj -3 
            00000025 00000103 stl 1 
            00000026 00000203 stl 2 
            00000027 00000100 ldc 1 
            00000028 00000008 shl 
            00000029 00000302 ldl 3 
            0000002A 00000007 sub 
            0000002B 00000410 brlz skip 
            0000002C 00000302 ldl 3 
            0000002D 00000202 ldl 2 
            0000002E 00000007 sub 
            0000002F 00000203 stl 2 
            00000030 00000202 skip: ldl 2 
            00000031 0000140F brz one 
            00000032 00000302 ldl 3 
            00000033 FFFFFF01 adc -1 
            00000034 00000003 stl 0 
            00000035 FFFFFF0A adj -1 
            00000036 00000102 ldl 1 
            00000037 00000003 stl 0 
            00000038 00000302 ldl 3 
            00000039 FFFFFF01 adc -1 
            0000003A FFFFE90D call triangle 
            0000003B 00000102 ldl 1 
            0000003C 00000003 stl 0 
            0000003D 00000103 stl 1 
            0000003E 00000302 ldl 3 
            0000003F FFFFE40D call triangle 
            00000040 0000010A adj 1 
            00000041 00000002 ldl 0 
            00000042 00000006 add 
            00000043 00000102 ldl 1 
            00000044 0000030A adj 3 
            00000045 00000004 return 
            00000046 00000100 one: ldc 1 
            00000047 00000102 ldl 1 
            00000048 0000030A adj 3 
            00000049 00000004 return 
            0000004A 0000000A count: data 10 
            0000004B 00000000 result: data 0 

   

     #test04.o file--------------->
        Empty

     5)# ASM-execution: /home/munesh/Desktop/coding_minutes/Munesh_cs209/asm.cpp
        # OUTPUT:
        #test05.log file--------------->

        Below are the label names and values :
        air => 8
        arjun => 9
        l2 => 10
        l4 => 5
        label1 => 0
        label2 => 1
        label3 => 7
        ldc => 2
        loop => 12
        loop1 => 13

        Below are the label names and values which have been used:

        Warnings: 
        Line 0 : Unused Label

        Errors: 
        Line 0 : No such Label
        Line 8 : There isn't  any such instruction 
        Line 9 : There isn't  any such instruction 
        Line 11 : Error! This operand allows one operation only
        Line 13 : Error! There must be an operand.
        Line 17 : There isn't  any such instruction 

     #test05.lst file--------------->
    00000000 00000000 label1: poo 
    00000001 00000D00 label2: ldc 13 
    00000002 00001400 ldc: ldc 20 
    00000003 00000000 loop3 
 #test05.o file--------------->
        Empty



2. EMULATOR:

I have tested 5 examples shown as below.The others were tested without any errors detected and produced execution data both on the screen and output text file for each example according to the usage instruction.
Emulator allows user to read memory and registers while executing. The following commands can be executed while the emulator is running:


**By giving the instruction like "g++ emu.cpp -o emu " and "./emu -trace test1.o", the program shows the state of registers as the program executes.

#output Test 01(test01.o)------->

munesh@munesh-VivoBook-ASUSLaptop-X512FA-X512FA:~/Desktop/coding_minutes/Munesh_cs209$ ./emu -trace test01.o

PC=00000003, SP=00000000, A=00000005, B=FFFFFFFB, br FFFFFFFF
PC=00000003, SP=00000000, A=00000005, B=FFFFFFFB, br FFFFFFFF
PC=00000003, SP=00000000, A=00000005, B=FFFFFFFB, br FFFFFFFF
PC=00000003, SP=00000000, A=00000005, B=FFFFFFFB, br FFFFFFFF
PC=00000003, SP=00000000, A=00000005, B=FFFFFFFB, br FFFFFFFF
PC=00000003, SP=00000000, A=00000005, B=FFFFFFFB, br FFFFFFFF
PC=00000003, SP=00000000, A=00000005, B=FFFFFFFB, br FFFFFFFF
PC=00000003, SP=00000000, A=00000005, B=FFFFFFFB, br FFFFFFFF
PC=00000003, SP=00000000, A=00000005, B=FFFFFFFB, br FFFFFFFF
PC=00000003, SP=00000000, A=00000005, B=FFFFFFFB, br FFFFFFFF
PC=00000003, SP=00000000, A=00000005, B=FFFFFFFB, br FFFFFFFF
PC=00000003, SP=00000000, A=00000005, B=FFFFFFFB, br FFFFFFFF
PC=00000003, SP=00000000, A=00000005, B=FFFFFFFB, br FFFFFFFF
PC=00000003, SP=00000000, A=00000005, B=FFFFFFFB, br FFFFFFFF
... infinity times
 
#output Test 02(test02.o)------->

munesh@munesh-VivoBook-ASUSLaptop-X512FA-X512FA:~/Desktop/coding_minutes/Munesh_cs209$ ./emu -trace test02.o
There doesn't exist any file with name: test02.o 

#output Test 03(test03.o)------->

munesh@munesh-VivoBook-ASUSLaptop-X512FA-X512FA:~/Desktop/coding_minutes/Munesh_cs209$ ./emu -trace test03.o
PC=00000001, SP=00000000, A=00000000, B=00000000, ldc 0000004B
PC=00000002, SP=00000000, A=0000004B, B=00000000, adc 00000042
ERROR: The memory being accessed is not valid

#output Test 04(test04.o)------->

munesh@munesh-VivoBook-ASUSLaptop-X512FA-X512FA:~/Desktop/coding_minutes/Munesh_cs209$ ./emu -trace test04.o
PC=00000000, SP=00000000, A=00000000, B=00000000, ldc 00001000
PC=00000001, SP=00000000, A=00001000, B=00000000, a2sp
PC=00000002, SP=00001000, A=00000000, B=00000000, adj FFFFFFFF
PC=00000003, SP=00000FFF, A=00000000, B=00000000, ldc 0000004B
PC=00000004, SP=00000FFF, A=0000004B, B=00000000, stl 00000000
PC=00000005, SP=00000FFF, A=00000000, B=00000000, ldc 0000004A
PC=00000006, SP=00000FFF, A=0000004A, B=00000000, ldnl 00000000
PC=00000007, SP=00000FFF, A=0000000A, B=00000000, call 00000002
PC=0000000A, SP=00000FFF, A=00000007, B=0000000A, adj FFFFFFFD
PC=0000000B, SP=00000FFC, A=00000007, B=0000000A, stl 00000001
PC=0000000C, SP=00000FFC, A=0000000A, B=0000000A, stl 00000002
PC=0000000D, SP=00000FFC, A=0000000A, B=0000000A, ldc 00000000
PC=0000000E, SP=00000FFC, A=00000000, B=0000000A, stl 00000000
PC=0000000F, SP=00000FFC, A=0000000A, B=0000000A, adj FFFFFFFF
PC=00000010, SP=00000FFB, A=0000000A, B=0000000A, ldl 00000003
PC=00000011, SP=00000FFB, A=0000000A, B=0000000A, stl 00000000
PC=00000012, SP=00000FFB, A=0000000A, B=0000000A, ldl 00000001
PC=00000013, SP=00000FFB, A=00000000, B=0000000A, call 00000010
PC=00000024, SP=00000FFB, A=00000013, B=00000000, adj FFFFFFFD
PC=00000025, SP=00000FF8, A=00000013, B=00000000, stl 00000001
PC=00000026, SP=00000FF8, A=00000000, B=00000000, stl 00000002
PC=00000027, SP=00000FF8, A=00000000, B=00000000, ldc 00000001
PC=00000028, SP=00000FF8, A=00000001, B=00000000, shl
PC=00000029, SP=00000FF8, A=00000000, B=00000000, ldl 00000003
PC=0000002A, SP=00000FF8, A=0000000A, B=00000000, sub
PC=0000002B, SP=00000FF8, A=FFFFFFF6, B=00000000, brlz 00000004
PC=00000030, SP=00000FF8, A=FFFFFFF6, B=00000000, ldl 00000002
PC=00000031, SP=00000FF8, A=00000000, B=FFFFFFF6, brz 00000014
PC=00000046, SP=00000FF8, A=00000000, B=FFFFFFF6, ldc 00000001
PC=00000047, SP=00000FF8, A=00000001, B=00000000, ldl 00000001
PC=00000048, SP=00000FF8, A=00000013, B=00000001, adj 00000003
PC=00000049, SP=00000FFB, A=00000013, B=00000001, ldnl 00000000
PC=0000004A, SP=00000FFB, A=0000100D, B=00000001, adj 00000000
PC=0000004B, SP=00000FFB, A=0000100D, B=00000001, ldc 00000000
ERROR: The memory being accessed is not valid
 
34 instructions executed 

#output Test 05(test05.o)------->
munesh@munesh-VivoBook-ASUSLaptop-X512FA-X512FA:~/Desktop/coding_minutes/Munesh_cs209$ ./emu -trace test05.o
There doesn't exist any file with name: test05.o 


Algo 1 (binary_search.asm)-------------->
OUTPUT------>

munesh@munesh-VivoBook-ASUSLaptop-X512FA-X512FA:~/Desktop/coding_minutes/Munesh_cs209$ ./asm binary_search.asm
The program is the following some kind of the error :
17: There isn't  any such instruction 
24: There isn't  any such instruction 
The program issues the following warning :
0: Unused Label

binary_search log file--->

Below are the label names and values :
EXIT => 43
FOUND => 40
INC_START => 35
LOOP => 11
array => 49
main => 4
n => 48
searched_index => 60
value => 47

Below are the label names and values which have been used:
EXIT
main
n

Warnings: 
Line 0 : Unused Label

Errors: 
Line 17 : There isn't  any such instruction 
Line 24 : There isn't  any such instruction 



binary_search lst file--->

00000000 00100000 ldc 0x1000 
00000001 0000000B a2sp 
00000002 0000010D call main 
00000003 00000012 HALT 
00000004 FFFFFF0A main: adj -1 
00000005 00000003 stl 0 
00000006 FFFFFD0A adj -3 
00000007 00000000 ldc 0 
00000008 00000003 stl 0 
00000009 00003000 ldc n 
0000000A 00000103 stl 1 
0000000B 00000000 LOOP: 
0000000C 00000102 ldl 1 
0000000D 00000002 ldl 0 
0000000E 00000007 sub 
0000000F 00001B10 brlz EXIT 
00000010 00001A0F brz EXIT 




Algo 2 (bubble_sort.asm)-------------->
OUTPUT------>

munesh@munesh-VivoBook-ASUSLaptop-X512FA-X512FA:~/Desktop/coding_minutes/Munesh_cs209$ ./asm bubble_sort.asm
Great! Program finished with zero errors.


bubble_sort log file---->

Below are the label names and values :
EXIT_INNER => 49
EXIT_OUTER => 51
LOOP_INNER => 15
LOOP_OUTER => 8
NEXT => 44
array => 55
main => 4
n => 9

Below are the label names and values which have been used:

EXIT_INNER
EXIT_OUTER
LOOP_INNER
LOOP_OUTER
NEXT
array
main
n

Warnings: 

Errors: 


bubble_sort lst file----->

00000000 00100000 ldc 0x1000 
00000001 0000000B a2sp 
00000002 0000010D call main 
00000003 00000012 HALT 
00000004 FFFFFE0A main: adj -2 
00000005 00000003 stl 0 
00000006 00000900 ldc n 
00000007 00000103 stl 1 
00000008 00000102 LOOP_OUTER: ldl 1 
00000009 0000290F brz EXIT_OUTER 
0000000A FFFFFF01 adc -1 
0000000B 00000103 stl 1 
0000000C FFFFFF0A adj -1 
0000000D 00000000 ldc 0 
0000000E 00000003 stl 0 
0000000F 00000002 LOOP_INNER: ldl 0 
00000010 00000900 ldc n 
00000011 FFFFFF01 adc -1 
00000012 00000007 sub 
00000013 00001D0F brz EXIT_INNER 
00000014 FFFFFD0A adj -3 
00000015 00003700 ldc array 
00000016 00000302 ldl 3 
00000017 00000006 add 
00000018 00000003 stl 0 
00000019 00000002 ldl 0 
0000001A 00000004 ldnl 0 
0000001B 00000203 stl 2 
0000001C 00000002 ldl 0 
0000001D 00000101 adc 1 
0000001E 00000103 stl 1 
0000001F 00000202 ldl 2 
00000020 00000102 ldl 1 
00000021 00000004 ldnl 0 
00000022 00000007 sub 
00000023 00000810 brlz NEXT 
00000024 0000070F brz NEXT 
00000025 00000102 ldl 1 
00000026 00000004 ldnl 0 
00000027 00000002 ldl 0 
00000028 00000005 stnl 0 
00000029 00000202 ldl 2 
0000002A 00000102 ldl 1 
0000002B 00000005 stnl 0 
0000002C 0000030A NEXT: adj 3 
0000002D 00000002 ldl 0 
0000002E 00000101 adc 1 
0000002F 00000003 stl 0 
00000030 FFFFDE11 br LOOP_INNER 
00000031 0000010A EXIT_INNER: adj 1 
00000032 FFFFD511 br LOOP_OUTER 
00000033 00000002 EXIT_OUTER: ldl 0 
00000034 0000030A adj 3 
00000035 00000004 return 
00000036 00000009 n: SET 9 
00000037 00000064 array: data 100 
00000038 00000078 data 120 
00000039 0000000C data 12 
0000003A 00000036 data 54 
0000003B 0000003E data 62 
0000003C 00000001 data 1 
0000003D FFFFFFFD data -3 
0000003E 000000A5 data 165 
0000003F 000000B2 data 178 


bubble_sort.o file----->
Empty


Great! Program finished with zero errors.


-------------------------*******************************----------------------------------------------------------------